#!/usr/bin/env python3
import argparse
import sys
from time import sleep
from string import ascii_uppercase

from final_exams import find_time
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

URLBASE = 'https://colss-prod.ec.svsu.edu/Student/Courses'


parser = argparse.ArgumentParser(
    description="Get instructor's schedule from website"
)
parser.add_argument(
    'instructor',
    help="Name as listed on the website, typically in 'Smith, J' format",
)
parser.add_argument('semester', help='Fall, Winter, Spring, Summer')
parser.add_argument('year', type=int, help='Full year')
args = parser.parse_args()

SEM = '{} {}'.format(args.semester, args.year)
INSTR = args.instructor


def print_stderr(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def course_search(headless=True):
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument('headless')
    options.add_argument('user-data-dir=/home/lahvak/.selenium')
    driver = webdriver.Chrome(options=options)
    driver.get(URLBASE + '/Search')
    # wait = WebDriverWait(driver, timeout=1200)
    # wait.until(EC.presence_of_element_located((By.ID, 'submit-course-search')))
    return driver


def select_instructor(driver, name):
    try:
        ass = driver.find_element(By.ID, 'showallfaculties')
    except NoSuchElementException:
        print_stderr('Cannot show all instructors')
        sys.exit()
    WebDriverWait(driver, 20).until(
        EC.element_to_be_clickable((By.ID, 'showallfaculties'))
    ).click()
    sleep(2)
    try:
        ass = driver.find_element(
            'xpath', "//label[contains(text(),'{}')]".format(name)
        )
    except NoSuchElementException:
        print_stderr('Cannot find instructor ' + name)
        sys.exit()
    sleep(5)
    ass.click()
    sleep(2)


def select_nonexpandable(driver, label):
    try:
        ass = driver.find_element(
            'xpath', "//label[contains(text(),'{}')]".format(label)
        )
    except NoSuchElementException:
        print_stderr('Cannot find element labeled ' + label)
        sys.exit()
    ass.click()
    sleep(2)


def expand_all_courses(driver):
    try:
        cours_ul = driver.find_element(By.ID, 'course-resultul')
    except NoSuchElementException:
        print_stderr('Cannot find course list')
        sys.exit()
    courses = cours_ul.find_elements(By.CLASS_NAME, 'esg-collapsible-group')
    for c in courses:
        c.click()
        sleep(1)

    return courses


def process_row(row):
    cells = row.find_elements(By.TAG_NAME, 'td')
    if len(cells) == 4:
        seats = cells[0].text
        time = cells[1].text
        locashun = cells[2].text
        instructours = cells[3].text
    elif len(cells) == 2:
        seats = None
        time = cells[0].text
        locashun = cells[1].text
        instructours = None
    else:
        print_stderr('Weird number of cells in this row!')
        print_stderr(len(cells))
        sys.exit()

    return {
        'seats': seats,
        'time': time,
        'locashun': locashun,
        'instructours': instructours,
    }


def process_section(sec):
    try:
        caption = sec.find_element(By.TAG_NAME, 'caption')
    except NoSuchElementException:
        print('Cannot find caption')
        sys.exit()
    caption = caption.get_attribute('textContent')

    # Get all the visible rows except the first one which is a header
    rows = [
        process_row(r)
        for r in sec.find_elements(By.TAG_NAME, 'tr')[1:]
        if r.is_displayed()
    ]

    return {'caption': caption, 'rows': rows}


def extract_all_sections(courses):
    return [
        process_section(sec)
        for c in courses
        for sec in c.find_elements(By.TAG_NAME, 'table')
    ]


def us_to_sane_time(ustime):
    """
    Gets a time in 00:00 *M format and returns a sane 24 hour one
    Does not deal with midnight as there are no classes at midnight
    so 12 am and 12 pm will all result in noon.
    """

    parts = ustime.split()
    if len(parts) != 2:
        print_stderr('invalid time format')
        print_stderr(ustime)
        sys.exit()
    moparts = parts[0].split(':')
    if len(moparts) != 2:
        print_stderr('invalid time format')
        print_stderr(ustime)
        sys.exit()
    if (parts[1].upper() == 'AM') or (moparts[0] == '12'):
        return parts[0]

    return '{}:{}'.format(int(moparts[0]) + 12, moparts[1])


def strip_section(section):
    """
    Gets useful info for one section, returns a dict.
    """

    if section['caption']:
        caption = section['caption'].splitlines()[0].replace('*', '-')
    else:
        caption = ''

    row = section['rows'][0]

    # For hybrid classes, the first row does not contain any
    # useful info. We will assume that all meetings happen at the
    # same weekday, the same time, and the same location, and simply
    # use the second row. It would be hard to create a weekly
    # schedule if that was not true, anyway.

    if "Hybrid" in row['locashun'] and len(section['rows']) > 1:
        row = section['rows'][1]

    loc = (
        row['locashun']
        .splitlines()[0]
        .replace('SVSU Main Campus, ', '')
    )

    time = row['time'].splitlines()[0]
    time_split = time.split(' ', 1)
    days = time_split[0].split('/')
    times = [us_to_sane_time(time) for time in time_split[1].split(' - ')]

    return {
        'caption': caption,
        'loc': loc,
        'days': days,
        'start': times[0],
        'end': times[1],
    }


def get_useful_info(instructor, semester):
    """
    Gets the info for the instructor and semester in a
    useful format.  Returns a list of dicts.
    """

    with course_search(headless=True) as driver:
        select_instructor(driver, instructor)
        select_nonexpandable(driver, semester)
        courses = expand_all_courses(driver)
        sections = extract_all_sections(courses)
        return [strip_section(section) for section in sections]


def abbreviate_building(locashun):
    abbreviations = {
        'Science East': 'SE',
        'Science West': 'SW',
        'Wickes Hall': 'W',
        'Pioneer Hall': 'P',
        'Zahnow Library': 'Z',
    }

    for old, new in abbreviations.items():
        if old in locashun:
            return locashun.replace(old, new)

    return locashun


def uppercase_letter():
    for c in ascii_uppercase:
        yield c


UPLETTER = uppercase_letter()


def tex_schedule_string(section):
    """
    Converts a section info to a TeX formatted string
    """

    return '\\class{}{{{}}}{{{}}}{{{}}}{{{}-{}}}'.format(
        UPLETTER.__next__(),
        section['caption'],
        abbreviate_building(section['loc']),
        ','.join(section['days']),
        section['start'],
        section['end'],
    )


def days_to_str(days):
    """
    Converts list of days to a string, replacing Th with R.
    """

    return ''.join('R' if day == 'Th' else day for day in days)


TEX_HEADER1 = r"""
\documentclass[10pt,letterpaper]{article}
\usepackage{xcolor}
\usepackage[left=1in, right=1in, top=.7in, bottom=.7in]{geometry}
\pagestyle{empty}
\thispagestyle{empty}
\usepackage{schedule}

\CellHeight{.6in}
\CellWidth{1in}
\TimeRange{"""

TEX_HEADER2 = r"""}
\SubUnits{30}
\BeginOn{Monday}
\TextSize{\small}
\FiveDay
\TwelveHour

\NewAppointment{classA}{blue!25!white}{black}
\NewAppointment{classB}{red!25!white}{black}
\NewAppointment{classC}{green!25!white}{black}
\NewAppointment{classD}{orange!50!white}{black}
\NewAppointment{officehour}{darkgray}{white}

\begin{document}
"""


def time_to_mins(time):
    """
    Convert from 24 hour time format to minutes.
    """

    return sum(l[0] * l[1] for
               l in zip(map(int, time.split(':')), [60, 1]))


def mins_to_time(minutes):
    """
    Convert minutes to 24 hour time format.
    """

    return "{}:{}".format(*divmod(minutes, 60))


def print_info(instructor, semester):
    """
    Prints semester information for one instructor.
    """

    info = get_useful_info(instructor, semester)

    lower_minutes = time_to_mins("12:00")
    upper_minutes = time_to_mins("12:00")

    for section in info:
        start_mins = time_to_mins(section['start'])
        end_mins = time_to_mins(section['end'])
        if start_mins < lower_minutes:
            lower_minutes = start_mins
        if end_mins > upper_minutes:
            upper_minutes = end_mins

    lower_minutes -= 60
    upper_minutes += 60

    print(TEX_HEADER1, mins_to_time(lower_minutes), " - ",
          mins_to_time(upper_minutes), TEX_HEADER2)

    print(
        '\n\\begin{{center}}\n{{\\Large {}}}\\\\\n{}\n\\end{{center}}\n'
        .format(instructor, semester)
    )

    print('\n\\begin{schedule}[]%')

    for section in info:
        print(tex_schedule_string(section))

    print('\\end{schedule}%\n')

    print('\n\\subsection*{Final Exams:}\n')
    print('\n\\begin{description}')

    for section in info:
        day, slot = find_time(days_to_str(section['days']), section['start'])
        print('\\item[{}:] {} {}'.format(section['caption'], day, slot))

    print('\\end{description}\n\n\\end{document}')


print_info(INSTR, SEM)
